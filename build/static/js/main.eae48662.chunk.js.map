{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","listBooks","setListBooks","editForm","setEditForm","index","setIndex","people","setPeople","yearCreate","setYearCreate","book","setBook","counterList","setCounterList","getStorage","JSON","parse","localStorage","getItem","addBooks","e","preventDefault","setItem","stringify","useEffect","length","className","onSubmit","type","value","onChange","target","name","placeholder","htmlFor","map","el","i","key","onClick","edit","splice","rem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAoGeA,MAjGf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGaJ,mBAAS,GAHtB,mBAGNK,EAHM,KAGCC,EAHD,OAIeN,mBAAS,IAJxB,mBAINO,EAJM,KAIEC,EAJF,OAKuBR,mBAAS,IALhC,mBAKNS,EALM,KAKMC,EALN,OAMWV,mBAAS,IANpB,mBAMNW,EANM,KAMAC,EANA,OAOyBZ,mBAAS,IAPlC,mBAONa,EAPM,KAOOC,EAPP,KAwBb,SAASC,IACP,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,UAGzC,SAASC,EAASC,GAChBA,EAAEC,iBAEEnB,GACFC,GAAY,GACZH,EAAUI,GAAS,CACjBE,SACAE,aACAE,OACAE,iBAGFK,aAAaK,QAAQ,QAASP,KAAKQ,UAAL,sBACzBvB,GADyB,CAE5B,CACEM,SACAE,aACAE,OACAE,mBAGJX,EAAaa,MA/BfP,EAAU,IACVE,EAAc,IACdE,EAAQ,IACRE,EAAe,IA+CjB,OA3DAW,oBAAU,WACJV,KAAgBd,EAAUyB,QAAU,GACtCxB,EAAa,YAAIa,QA0DnB,yBAAKY,UAAU,OACb,yBAAKA,UAAU,qBACb,8IACA,0BAAMC,SAAU,SAACP,GAAD,OAAOD,EAASC,IAAIM,UAAWxB,EAAW,YAAc,MACtE,+BAAO,2BAAO0B,KAAK,OAAOC,MAAOvB,EAAQwB,SAAU,SAACV,GAAD,OAAOb,EAAUa,EAAEW,OAAOF,QAAQG,KAAK,SAASC,YAAY,oCAC/G,+BAAO,2BAAOL,KAAK,OAAOC,MAAOrB,EAAYsB,SAAU,SAACV,GAAD,OAAOX,EAAcW,EAAEW,OAAOF,QAAQG,KAAK,gBAClG,+BAAO,2BAAOJ,KAAK,OAAOC,MAAOnB,EAAMoB,SAAU,SAACV,GAAD,OAAOT,EAAQS,EAAEW,OAAOF,QAAQG,KAAK,OAAOC,YAAY,qFACzG,+BAAO,2BAAOL,KAAK,SAASC,MAAOjB,EAAakB,SAAU,SAACV,GAAD,OAAOP,EAAeO,EAAEW,OAAOF,QAAQG,KAAK,cAAeC,YAAY,6GACjI,2BAAOC,QAAQ,IAAG,2BAAON,KAAK,SAASC,MAAQ3B,EAA8B,yDAAnB,uFAI9D,wBAAIwB,UAAU,cACV1B,EAAmBA,EAAUyB,OAAS,EAAI,wBAAIC,UAAU,UAAd,0FAA+C1B,EAAUmC,IAAI,SAACC,EAAIC,GAAL,OACvG,wBAAIC,IAAKD,EAAGX,UAAYxB,GAAYmC,GAAKjC,EAAS,YAAc,MAC9D,2BAAIgC,EAAG9B,QACP,2BAAI8B,EAAG1B,MACP,yBAAKgB,UAAU,sBACb,4BAAQa,QAAS,kBA5B7B,SAAcF,GACZlC,GAAY,GACZI,EAAUP,EAAUqC,GAAG/B,QACvBG,EAAcT,EAAUqC,GAAG7B,YAC3BG,EAAQX,EAAUqC,GAAG3B,MACrBG,EAAeb,EAAUqC,GAAGzB,aAC5BP,EAASgC,GAsBwBG,CAAKH,KAA5B,oDACA,4BAAQE,QAAS,kBAlC7B,SAAaF,GACXrC,EAAUyC,OAAOJ,EAAG,GACpBpC,EAAa,YAAID,IAgCgB0C,CAAIL,KAA3B,kDANQ,QCzEFM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.eae48662.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [listBooks, setListBooks] = useState([]);\n  const [editForm, setEditForm] = useState(false);\n  const [index, setIndex] = useState(0);\n  const [people, setPeople] = useState('');\n  const [yearCreate, setYearCreate] = useState('');\n  const [book, setBook] = useState('');\n  const [counterList, setCounterList] = useState('');\n  \n  useEffect(() => {\n    if (getStorage() && listBooks.length <= 0) {\n      setListBooks([...getStorage()]);\n    }\n  });\n  \n  // Если дергать таргет у формы чтобы сделать e.target.reset() - происходит баг без ошибки.\n  // Вызвав один раз кнопкой submit форма сбрасывается, когда меняется логика - reset уже не работает.\n  function reset() {\n    setPeople('');\n    setYearCreate('');\n    setBook('');\n    setCounterList('');\n  }\n  \n  function getStorage() {\n    return JSON.parse(localStorage.getItem('lists'))\n  }\n  \n  function addBooks(e) {\n    e.preventDefault();\n    \n    if (editForm) {\n      setEditForm(false);\n      listBooks[index] = {\n        people,\n        yearCreate,\n        book,\n        counterList\n      };\n    } else {\n      localStorage.setItem('lists', JSON.stringify([\n        ...listBooks,\n        {\n          people,\n          yearCreate,\n          book,\n          counterList\n        }\n      ]));\n      setListBooks(getStorage());\n    }\n    reset();\n  }\n  \n  function rem(i) {\n    listBooks.splice(i, 1);\n    setListBooks([...listBooks]);\n  }\n\n  function edit(i) {\n    setEditForm(true);\n    setPeople(listBooks[i].people);\n    setYearCreate(listBooks[i].yearCreate);\n    setBook(listBooks[i].book);\n    setCounterList(listBooks[i].counterList);\n    setIndex(i);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"form-add-new-book\">\n        <h4>Добавить новую книгу</h4>\n        <form onSubmit={(e) => addBooks(e)} className={editForm ? 'form-edit' : null}>\n          <label><input type=\"text\" value={people} onChange={(e) => setPeople(e.target.value)} name=\"people\" placeholder=\"Автор\"/></label>\n          <label><input type=\"date\" value={yearCreate} onChange={(e) => setYearCreate(e.target.value)} name=\"yearCreate\"/></label>\n          <label><input type=\"text\" value={book} onChange={(e) => setBook(e.target.value)} name=\"book\" placeholder=\"Название книги\"/></label>\n          <label><input type=\"number\" value={counterList} onChange={(e) => setCounterList(e.target.value)} name=\"counterList\"  placeholder=\"Количество страниц\"/></label>\n          <label htmlFor=\"\"><input type=\"submit\" value={!editForm ? 'Добавить книгу' : 'Сохранить'}/></label>\n        </form>\n      </div>\n      \n      <ul className=\"list-books\">\n        {!listBooks ? null : listBooks.length < 1 ? <li className=\"center\">Список книг пуст</li> : listBooks.map((el, i) => (\n          <li key={i} className={(editForm && i == index) ? 'form-edit' : null}>\n            <p>{el.people}</p>\n            <p>{el.book}</p>\n            <div className=\"bottom-controllers\">\n              <button onClick={() => edit(i)}>Изменить</button>\n              <button onClick={() => rem(i)}>Удалить</button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}